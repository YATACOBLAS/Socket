{"version":3,"sources":["webpack:///../../../src/components/VGrid/VLayout.ts","webpack:///../../../src/components/VCheckbox/VCheckbox.ts","webpack:///../../../src/components/VSwitch/VSwitch.ts","webpack:///../../../src/components/VAutocomplete/VAutocomplete.ts","webpack:///../../../src/mixins/rippleable/index.ts","webpack:///../../../src/mixins/selectable/index.ts"],"names":["name","props","indeterminate","indeterminateIcon","type","default","offIcon","onIcon","data","inputIndeterminate","this","computed","classes","computedIcon","validationState","isDisabled","hasError","hasColor","watch","isActive","methods","genCheckbox","$createElement","staticClass","setTextColor","dense","dark","light","genInput","toString","genRipple","genDefaultSlot","directives","Touch","inset","loading","Boolean","flat","attrs","String","role","switchData","undefined","class","themeClasses","genSwitch","attrs$","value","left","right","onSwipeRight","genProgress","$slots","progress","color","size","width","onSwipeLeft","onChange","onKeydown","e","defaultMenuProps","offsetY","offsetOverflow","transition","allowOverflow","autoSelectFirst","filter","itemText","queryText","hideNoData","menuProps","noFilter","searchInput","lazySearch","selectedIndex","computedItems","selectedValues","selectedItems","map","item","hasDisplayedItems","hideSelected","filteredItems","some","length","currentRange","selectedItem","getText","internalSearch","allItems","text","get","set","isAnyValueAllowed","isDirty","searchIsDirty","isSearching","multiple","menuCanShow","$_menuProps","find","i","listData","items","internalValue","isFocused","document","$refs","input","isMenuActive","val","oldVal","activateMenu","created","destroyed","onFilteredItemsChanged","onInternalSearchChanged","updateMenuDimensions","menu","changeSelectedIndex","keyCode","deleteCurrentItem","curIndex","curItem","getDisabled","lastIndex","nextIndex","nextItem","clearableCallback","autocomplete","domProps","genInputSlot","slot","genSelections","hasSlot","onClick","isAppendInner","onInput","target","onKeyDown","onSpaceDown","onTabDown","onUpDown","selectItem","setSelectedItems","setSearch","updateSelf","valueComparator","getValue","hasItem","indexOf","onCopy","currentItem","currentItemText","event","ripple","center","mixins","model","prop","id","inputValue","falseValue","trueValue","label","lazyValue","computedColor","isDark","isMultiple","Array","rippleState","genLabel","VInput","click","prevent","Object","disabled","checked","on","blur","change","focus","keydown","ref","onBlur","onFocus"],"mappings":"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","file":"js/LabClinico~Patologia.9c580e9b.js","sourcesContent":["import './_grid.sass'\n\nimport Grid from './grid'\n\nexport default Grid('layout')\n","// Styles\nimport './VCheckbox.sass'\nimport '../../styles/components/_selection-controls.sass'\n\n// Components\nimport VIcon from '../VIcon'\nimport VInput from '../VInput'\n\n// Mixins\nimport Selectable from '../../mixins/selectable'\n\n/* @vue/component */\nexport default Selectable.extend({\n  name: 'v-checkbox',\n\n  props: {\n    indeterminate: Boolean,\n    indeterminateIcon: {\n      type: String,\n      default: '$checkboxIndeterminate',\n    },\n    offIcon: {\n      type: String,\n      default: '$checkboxOff',\n    },\n    onIcon: {\n      type: String,\n      default: '$checkboxOn',\n    },\n  },\n\n  data () {\n    return {\n      inputIndeterminate: this.indeterminate,\n    }\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        ...VInput.options.computed.classes.call(this),\n        'v-input--selection-controls': true,\n        'v-input--checkbox': true,\n        'v-input--indeterminate': this.inputIndeterminate,\n      }\n    },\n    computedIcon (): string {\n      if (this.inputIndeterminate) {\n        return this.indeterminateIcon\n      } else if (this.isActive) {\n        return this.onIcon\n      } else {\n        return this.offIcon\n      }\n    },\n    // Do not return undefined if disabled,\n    // according to spec, should still show\n    // a color when disabled and active\n    validationState (): string | undefined {\n      if (this.isDisabled && !this.inputIndeterminate) return undefined\n      if (this.hasError && this.shouldValidate) return 'error'\n      if (this.hasSuccess) return 'success'\n      if (this.hasColor !== null) return this.computedColor\n      return undefined\n    },\n  },\n\n  watch: {\n    indeterminate (val) {\n      // https://github.com/vuetifyjs/vuetify/issues/8270\n      this.$nextTick(() => (this.inputIndeterminate = val))\n    },\n    inputIndeterminate (val) {\n      this.$emit('update:indeterminate', val)\n    },\n    isActive () {\n      if (!this.indeterminate) return\n      this.inputIndeterminate = false\n    },\n  },\n\n  methods: {\n    genCheckbox () {\n      return this.$createElement('div', {\n        staticClass: 'v-input--selection-controls__input',\n      }, [\n        this.$createElement(VIcon, this.setTextColor(this.validationState, {\n          props: {\n            dense: this.dense,\n            dark: this.dark,\n            light: this.light,\n          },\n        }), this.computedIcon),\n        this.genInput('checkbox', {\n          ...this.attrs$,\n          'aria-checked': this.inputIndeterminate\n            ? 'mixed'\n            : this.isActive.toString(),\n        }),\n        this.genRipple(this.setTextColor(this.rippleState)),\n      ])\n    },\n    genDefaultSlot () {\n      return [\n        this.genCheckbox(),\n        this.genLabel(),\n      ]\n    },\n  },\n})\n","// Styles\nimport '../../styles/components/_selection-controls.sass'\nimport './VSwitch.sass'\n\n// Mixins\nimport Selectable from '../../mixins/selectable'\nimport VInput from '../VInput'\n\n// Directives\nimport Touch from '../../directives/touch'\n\n// Components\nimport { VFabTransition } from '../transitions'\nimport VProgressCircular from '../VProgressCircular/VProgressCircular'\n\n// Helpers\nimport { keyCodes } from '../../util/helpers'\n\n// Types\nimport { VNode, VNodeData } from 'vue'\n\n/* @vue/component */\nexport default Selectable.extend({\n  name: 'v-switch',\n\n  directives: { Touch },\n\n  props: {\n    inset: Boolean,\n    loading: {\n      type: [Boolean, String],\n      default: false,\n    },\n    flat: {\n      type: Boolean,\n      default: false,\n    },\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        ...VInput.options.computed.classes.call(this),\n        'v-input--selection-controls v-input--switch': true,\n        'v-input--switch--flat': this.flat,\n        'v-input--switch--inset': this.inset,\n      }\n    },\n    attrs (): object {\n      return {\n        'aria-checked': String(this.isActive),\n        'aria-disabled': String(this.isDisabled),\n        role: 'switch',\n      }\n    },\n    // Do not return undefined if disabled,\n    // according to spec, should still show\n    // a color when disabled and active\n    validationState (): string | undefined {\n      if (this.hasError && this.shouldValidate) return 'error'\n      if (this.hasSuccess) return 'success'\n      if (this.hasColor !== null) return this.computedColor\n      return undefined\n    },\n    switchData (): VNodeData {\n      return this.setTextColor(this.loading ? undefined : this.validationState, {\n        class: this.themeClasses,\n      })\n    },\n  },\n\n  methods: {\n    genDefaultSlot (): (VNode | null)[] {\n      return [\n        this.genSwitch(),\n        this.genLabel(),\n      ]\n    },\n    genSwitch (): VNode {\n      return this.$createElement('div', {\n        staticClass: 'v-input--selection-controls__input',\n      }, [\n        this.genInput('checkbox', {\n          ...this.attrs,\n          ...this.attrs$,\n        }),\n        this.genRipple(this.setTextColor(this.validationState, {\n          directives: [{\n            name: 'touch',\n            value: {\n              left: this.onSwipeLeft,\n              right: this.onSwipeRight,\n            },\n          }],\n        })),\n        this.$createElement('div', {\n          staticClass: 'v-input--switch__track',\n          ...this.switchData,\n        }),\n        this.$createElement('div', {\n          staticClass: 'v-input--switch__thumb',\n          ...this.switchData,\n        }, [this.genProgress()]),\n      ])\n    },\n    genProgress (): VNode {\n      return this.$createElement(VFabTransition, {}, [\n        this.loading === false\n          ? null\n          : this.$slots.progress || this.$createElement(VProgressCircular, {\n            props: {\n              color: (this.loading === true || this.loading === '')\n                ? (this.color || 'primary')\n                : this.loading,\n              size: 16,\n              width: 2,\n              indeterminate: true,\n            },\n          }),\n      ])\n    },\n    onSwipeLeft () {\n      if (this.isActive) this.onChange()\n    },\n    onSwipeRight () {\n      if (!this.isActive) this.onChange()\n    },\n    onKeydown (e: KeyboardEvent) {\n      if (\n        (e.keyCode === keyCodes.left && this.isActive) ||\n        (e.keyCode === keyCodes.right && !this.isActive)\n      ) this.onChange()\n    },\n  },\n})\n","// Styles\nimport './VAutocomplete.sass'\n\n// Extensions\nimport VSelect, { defaultMenuProps as VSelectMenuProps } from '../VSelect/VSelect'\nimport VTextField from '../VTextField/VTextField'\n\n// Utilities\nimport mergeData from '../../util/mergeData'\nimport {\n  getObjectValueByPath,\n  getPropertyFromItem,\n  keyCodes,\n} from '../../util/helpers'\n\n// Types\nimport { PropType, VNode } from 'vue'\nimport { PropValidator } from 'vue/types/options'\n\nconst defaultMenuProps = {\n  ...VSelectMenuProps,\n  offsetY: true,\n  offsetOverflow: true,\n  transition: false,\n}\n\n/* @vue/component */\nexport default VSelect.extend({\n  name: 'v-autocomplete',\n\n  props: {\n    allowOverflow: {\n      type: Boolean,\n      default: true,\n    },\n    autoSelectFirst: {\n      type: Boolean,\n      default: false,\n    },\n    filter: {\n      type: Function,\n      default: (item: any, queryText: string, itemText: string) => {\n        return itemText.toLocaleLowerCase().indexOf(queryText.toLocaleLowerCase()) > -1\n      },\n    } as PropValidator<(item: any, queryText: string, itemText: string) => boolean>,\n    hideNoData: Boolean,\n    menuProps: {\n      type: VSelect.options.props.menuProps.type,\n      default: () => defaultMenuProps,\n    },\n    noFilter: Boolean,\n    searchInput: {\n      type: String as PropType<string | null>,\n    },\n  },\n\n  data () {\n    return {\n      lazySearch: this.searchInput,\n    }\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        ...VSelect.options.computed.classes.call(this),\n        'v-autocomplete': true,\n        'v-autocomplete--is-selecting-index': this.selectedIndex > -1,\n      }\n    },\n    computedItems (): object[] {\n      return this.filteredItems\n    },\n    selectedValues (): object[] {\n      return this.selectedItems.map(item => this.getValue(item))\n    },\n    hasDisplayedItems (): boolean {\n      return this.hideSelected\n        ? this.filteredItems.some(item => !this.hasItem(item))\n        : this.filteredItems.length > 0\n    },\n    currentRange (): number {\n      if (this.selectedItem == null) return 0\n\n      return String(this.getText(this.selectedItem)).length\n    },\n    filteredItems (): object[] {\n      if (!this.isSearching || this.noFilter || this.internalSearch == null) return this.allItems\n\n      return this.allItems.filter(item => {\n        const value = getPropertyFromItem(item, this.itemText)\n        const text = value != null ? String(value) : ''\n\n        return this.filter(item, String(this.internalSearch), text)\n      })\n    },\n    internalSearch: {\n      get (): string | null {\n        return this.lazySearch\n      },\n      set (val: any) { // TODO: this should be `string | null` but it breaks lots of other types\n        // emit update event only when the new\n        // search value is different from previous\n        if (this.lazySearch !== val) {\n          this.lazySearch = val\n          this.$emit('update:search-input', val)\n        }\n      },\n    },\n    isAnyValueAllowed (): boolean {\n      return false\n    },\n    isDirty (): boolean {\n      return this.searchIsDirty || this.selectedItems.length > 0\n    },\n    isSearching (): boolean {\n      return (\n        this.multiple &&\n        this.searchIsDirty\n      ) || (\n        this.searchIsDirty &&\n        this.internalSearch !== this.getText(this.selectedItem)\n      )\n    },\n    menuCanShow (): boolean {\n      if (!this.isFocused) return false\n\n      return this.hasDisplayedItems || !this.hideNoData\n    },\n    $_menuProps (): object {\n      const props = VSelect.options.computed.$_menuProps.call(this);\n      (props as any).contentClass = `v-autocomplete__content ${(props as any).contentClass || ''}`.trim()\n      return {\n        ...defaultMenuProps,\n        ...props,\n      }\n    },\n    searchIsDirty (): boolean {\n      return this.internalSearch != null &&\n        this.internalSearch !== ''\n    },\n    selectedItem (): any {\n      if (this.multiple) return null\n\n      return this.selectedItems.find(i => {\n        return this.valueComparator(this.getValue(i), this.getValue(this.internalValue))\n      })\n    },\n    listData () {\n      const data = VSelect.options.computed.listData.call(this) as any\n\n      data.props = {\n        ...data.props,\n        items: this.virtualizedItems,\n        noFilter: (\n          this.noFilter ||\n          !this.isSearching ||\n          !this.filteredItems.length\n        ),\n        searchInput: this.internalSearch,\n      }\n\n      return data\n    },\n  },\n\n  watch: {\n    filteredItems: 'onFilteredItemsChanged',\n    internalValue: 'setSearch',\n    isFocused (val) {\n      if (val) {\n        document.addEventListener('copy', this.onCopy)\n        this.$refs.input && this.$refs.input.select()\n      } else {\n        document.removeEventListener('copy', this.onCopy)\n        this.$refs.input && this.$refs.input.blur()\n        this.updateSelf()\n      }\n    },\n    isMenuActive (val) {\n      if (val || !this.hasSlot) return\n\n      this.lazySearch = null\n    },\n    items (val, oldVal) {\n      // If we are focused, the menu\n      // is not active, hide no data is enabled,\n      // and items change\n      // User is probably async loading\n      // items, try to activate the menu\n      if (\n        !(oldVal && oldVal.length) &&\n        this.hideNoData &&\n        this.isFocused &&\n        !this.isMenuActive &&\n        val.length\n      ) this.activateMenu()\n    },\n    searchInput (val: string) {\n      this.lazySearch = val\n    },\n    internalSearch: 'onInternalSearchChanged',\n    itemText: 'updateSelf',\n  },\n\n  created () {\n    this.setSearch()\n  },\n\n  destroyed () {\n    document.removeEventListener('copy', this.onCopy)\n  },\n\n  methods: {\n    onFilteredItemsChanged (val: never[], oldVal: never[]) {\n      // TODO: How is the watcher triggered\n      // for duplicate items? no idea\n      if (val === oldVal) return\n\n      this.setMenuIndex(-1)\n\n      this.$nextTick(() => {\n        if (\n          !this.internalSearch ||\n          (val.length !== 1 &&\n            !this.autoSelectFirst)\n        ) return\n\n        this.$refs.menu.getTiles()\n        this.setMenuIndex(0)\n      })\n    },\n    onInternalSearchChanged () {\n      this.updateMenuDimensions()\n    },\n    updateMenuDimensions () {\n      // Type from menuable is not making it through\n      this.isMenuActive && this.$refs.menu && this.$refs.menu.updateDimensions()\n    },\n    changeSelectedIndex (keyCode: number) {\n      // Do not allow changing of selectedIndex\n      // when search is dirty\n      if (this.searchIsDirty) return\n\n      if (this.multiple && keyCode === keyCodes.left) {\n        if (this.selectedIndex === -1) {\n          this.selectedIndex = this.selectedItems.length - 1\n        } else {\n          this.selectedIndex--\n        }\n      } else if (this.multiple && keyCode === keyCodes.right) {\n        if (this.selectedIndex >= this.selectedItems.length - 1) {\n          this.selectedIndex = -1\n        } else {\n          this.selectedIndex++\n        }\n      } else if (keyCode === keyCodes.backspace || keyCode === keyCodes.delete) {\n        this.deleteCurrentItem()\n      }\n    },\n    deleteCurrentItem () {\n      const curIndex = this.selectedIndex\n      const curItem = this.selectedItems[curIndex]\n\n      // Do nothing if input or item is disabled\n      if (\n        !this.isInteractive ||\n        this.getDisabled(curItem)\n      ) return\n\n      const lastIndex = this.selectedItems.length - 1\n\n      // Select the last item if\n      // there is no selection\n      if (\n        this.selectedIndex === -1 &&\n        lastIndex !== 0\n      ) {\n        this.selectedIndex = lastIndex\n\n        return\n      }\n\n      const length = this.selectedItems.length\n      const nextIndex = curIndex !== length - 1\n        ? curIndex\n        : curIndex - 1\n      const nextItem = this.selectedItems[nextIndex]\n\n      if (!nextItem) {\n        this.setValue(this.multiple ? [] : null)\n      } else {\n        this.selectItem(curItem)\n      }\n\n      this.selectedIndex = nextIndex\n    },\n    clearableCallback () {\n      this.internalSearch = null\n\n      VSelect.options.methods.clearableCallback.call(this)\n    },\n    genInput () {\n      const input = VTextField.options.methods.genInput.call(this)\n\n      input.data = mergeData(input.data!, {\n        attrs: {\n          'aria-activedescendant': getObjectValueByPath(this.$refs.menu, 'activeTile.id'),\n          autocomplete: getObjectValueByPath(input.data!, 'attrs.autocomplete', 'off'),\n        },\n        domProps: { value: this.internalSearch },\n      })\n\n      return input\n    },\n    genInputSlot () {\n      const slot = VSelect.options.methods.genInputSlot.call(this)\n\n      slot.data!.attrs!.role = 'combobox'\n\n      return slot\n    },\n    genSelections (): VNode | never[] {\n      return this.hasSlot || this.multiple\n        ? VSelect.options.methods.genSelections.call(this)\n        : []\n    },\n    onClick (e: MouseEvent) {\n      if (!this.isInteractive) return\n\n      this.selectedIndex > -1\n        ? (this.selectedIndex = -1)\n        : this.onFocus()\n\n      if (!this.isAppendInner(e.target)) this.activateMenu()\n    },\n    onInput (e: Event) {\n      if (\n        this.selectedIndex > -1 ||\n        !e.target\n      ) return\n\n      const target = e.target as HTMLInputElement\n      const value = target.value\n\n      // If typing and menu is not currently active\n      if (target.value) this.activateMenu()\n\n      this.internalSearch = value\n      this.badInput = target.validity && target.validity.badInput\n    },\n    onKeyDown (e: KeyboardEvent) {\n      const keyCode = e.keyCode\n\n      if (\n        e.ctrlKey ||\n        ![keyCodes.home, keyCodes.end].includes(keyCode)\n      ) {\n        VSelect.options.methods.onKeyDown.call(this, e)\n      }\n\n      // The ordering is important here\n      // allows new value to be updated\n      // and then moves the index to the\n      // proper location\n      this.changeSelectedIndex(keyCode)\n    },\n    onSpaceDown (e: KeyboardEvent) { /* noop */ },\n    onTabDown (e: KeyboardEvent) {\n      VSelect.options.methods.onTabDown.call(this, e)\n      this.updateSelf()\n    },\n    onUpDown (e: Event) {\n      // Prevent screen from scrolling\n      e.preventDefault()\n\n      // For autocomplete / combobox, cycling\n      // interfers with native up/down behavior\n      // instead activate the menu\n      this.activateMenu()\n    },\n    selectItem (item: object) {\n      VSelect.options.methods.selectItem.call(this, item)\n      this.setSearch()\n    },\n    setSelectedItems () {\n      VSelect.options.methods.setSelectedItems.call(this)\n\n      // #4273 Don't replace if searching\n      // #4403 Don't replace if focused\n      if (!this.isFocused) this.setSearch()\n    },\n    setSearch () {\n      // Wait for nextTick so selectedItem\n      // has had time to update\n      this.$nextTick(() => {\n        if (\n          !this.multiple ||\n          !this.internalSearch ||\n          !this.isMenuActive\n        ) {\n          this.internalSearch = (\n            !this.selectedItems.length ||\n            this.multiple ||\n            this.hasSlot\n          )\n            ? null\n            : this.getText(this.selectedItem)\n        }\n      })\n    },\n    updateSelf () {\n      if (!this.searchIsDirty &&\n        !this.internalValue\n      ) return\n\n      if (!this.valueComparator(\n        this.internalSearch,\n        this.getValue(this.internalValue)\n      )) {\n        this.setSearch()\n      }\n    },\n    hasItem (item: any): boolean {\n      return this.selectedValues.indexOf(this.getValue(item)) > -1\n    },\n    onCopy (event: ClipboardEvent) {\n      if (this.selectedIndex === -1) return\n\n      const currentItem = this.selectedItems[this.selectedIndex]\n      const currentItemText = this.getText(currentItem)\n      event.clipboardData?.setData('text/plain', currentItemText)\n      event.clipboardData?.setData('text/vnd.vuetify.autocomplete.item+plain', currentItemText)\n      event.preventDefault()\n    },\n  },\n})\n","// Directives\nimport ripple from '../../directives/ripple'\n\n// Types\nimport Vue, { VNode, VNodeData, VNodeDirective } from 'vue'\n\nexport default Vue.extend({\n  name: 'rippleable',\n\n  directives: { ripple },\n\n  props: {\n    ripple: {\n      type: [Boolean, Object],\n      default: true,\n    },\n  },\n\n  methods: {\n    genRipple (data: VNodeData = {}): VNode | null {\n      if (!this.ripple) return null\n\n      data.staticClass = 'v-input--selection-controls__ripple'\n\n      data.directives = data.directives || []\n      data.directives.push({\n        name: 'ripple',\n        value: { center: true },\n      } as VNodeDirective)\n\n      return this.$createElement('div', data)\n    },\n  },\n})\n","// Components\nimport VInput from '../../components/VInput'\n\n// Mixins\nimport Rippleable from '../rippleable'\nimport Comparable from '../comparable'\n\n// Utilities\nimport mixins from '../../util/mixins'\n\nexport function prevent (e: Event) {\n  e.preventDefault()\n}\n\n/* @vue/component */\nexport default mixins(\n  VInput,\n  Rippleable,\n  Comparable\n).extend({\n  name: 'selectable',\n\n  model: {\n    prop: 'inputValue',\n    event: 'change',\n  },\n\n  props: {\n    id: String,\n    inputValue: null as any,\n    falseValue: null as any,\n    trueValue: null as any,\n    multiple: {\n      type: Boolean,\n      default: null,\n    },\n    label: String,\n  },\n\n  data () {\n    return {\n      hasColor: this.inputValue,\n      lazyValue: this.inputValue,\n    }\n  },\n\n  computed: {\n    computedColor (): string | undefined {\n      if (!this.isActive) return undefined\n      if (this.color) return this.color\n      if (this.isDark && !this.appIsDark) return 'white'\n      return 'primary'\n    },\n    isMultiple (): boolean {\n      return this.multiple === true || (this.multiple === null && Array.isArray(this.internalValue))\n    },\n    isActive (): boolean {\n      const value = this.value\n      const input = this.internalValue\n\n      if (this.isMultiple) {\n        if (!Array.isArray(input)) return false\n\n        return input.some(item => this.valueComparator(item, value))\n      }\n\n      if (this.trueValue === undefined || this.falseValue === undefined) {\n        return value\n          ? this.valueComparator(value, input)\n          : Boolean(input)\n      }\n\n      return this.valueComparator(input, this.trueValue)\n    },\n    isDirty (): boolean {\n      return this.isActive\n    },\n    rippleState (): string | undefined {\n      return !this.isDisabled && !this.validationState\n        ? undefined\n        : this.validationState\n    },\n  },\n\n  watch: {\n    inputValue (val) {\n      this.lazyValue = val\n      this.hasColor = val\n    },\n  },\n\n  methods: {\n    genLabel () {\n      const label = VInput.options.methods.genLabel.call(this)\n\n      if (!label) return label\n\n      label!.data!.on = {\n        // Label shouldn't cause the input to focus\n        click: prevent,\n      }\n\n      return label\n    },\n    genInput (type: string, attrs: object) {\n      return this.$createElement('input', {\n        attrs: Object.assign({\n          'aria-checked': this.isActive.toString(),\n          disabled: this.isDisabled,\n          id: this.computedId,\n          role: type,\n          type,\n        }, attrs),\n        domProps: {\n          value: this.value,\n          checked: this.isActive,\n        },\n        on: {\n          blur: this.onBlur,\n          change: this.onChange,\n          focus: this.onFocus,\n          keydown: this.onKeydown,\n          click: prevent,\n        },\n        ref: 'input',\n      })\n    },\n    onBlur () {\n      this.isFocused = false\n    },\n    onClick (e: Event) {\n      this.onChange()\n      this.$emit('click', e)\n    },\n    onChange () {\n      if (!this.isInteractive) return\n\n      const value = this.value\n      let input = this.internalValue\n\n      if (this.isMultiple) {\n        if (!Array.isArray(input)) {\n          input = []\n        }\n\n        const length = input.length\n\n        input = input.filter((item: any) => !this.valueComparator(item, value))\n\n        if (input.length === length) {\n          input.push(value)\n        }\n      } else if (this.trueValue !== undefined && this.falseValue !== undefined) {\n        input = this.valueComparator(input, this.trueValue) ? this.falseValue : this.trueValue\n      } else if (value) {\n        input = this.valueComparator(input, value) ? null : value\n      } else {\n        input = !input\n      }\n\n      this.validate(true, input)\n      this.internalValue = input\n      this.hasColor = input\n    },\n    onFocus () {\n      this.isFocused = true\n    },\n    /** @abstract */\n    onKeydown (e: Event) {},\n  },\n})\n"],"sourceRoot":""}